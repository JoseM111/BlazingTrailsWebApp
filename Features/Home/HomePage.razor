@page "/"
@inject HttpClient Http
@*| @inject [TYPE] [NAME] |
		. The inject directive is a really nice feature allowing 
		  us to quickly and easily inject instances of objects 
		  registered with the service container in Program.Main,
		  into our components. But the directive is just some 
		  syntactic sugar saving us a chunk of typing. Blazor
		  uses property injection for its components, what the 
		  inject directive gets compiled down to is a property
			decorated with an attribute called Inject.
*@

@*
	━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	@page:
		• As we talked about earlier, to make a component into a
		  routable component we need to use the @page directive 
		  and a route template which specifies the route it will
		  be responsible for.
	━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
*@
@* ⚫️⚫️☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰  HTML  ☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰ *@

@if(_trails == null) {
	<p>Loading trails...</p>
	//☰☰☰☰☰☰☰☰☰☰
} else {
	//☰☰☰☰☰☰☰☰☰☰
	<div class="row row-cols-1 row-cols-md-2">
		@*☰☰☰☰☰☰☰☰☰☰*@
		@foreach(var trail in _trails) {
			//☰☰☰☰☰☰☰☰☰☰
			<div class="col mb-4">
				<TrailCard Trail="trail" />
			</div>
		}
	</div>
}


@* ⚫️⚫️☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰  C#  ☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰☰ *@
@code {
	//☰☰☰☰☰☰☰☰☰☰
	private IEnumerable<TrailModel> _trails;
	
	/**━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	<HttpClient-Blazor-Methods>:
	    • will be available as a static asset at runtime just like the CSS file,
	      this means the path we need to pass in the GET request is simply,
	      “trails/trail-data.json”. A great productivity enhancement which ships
	      with Blazor is the addition of some extension methods for the HttpClient:
			
			• GetFromJsonAsync
			• PostAsJsonAsync
			• PutAsJsonAsync

			• Under the hood, these methods are using the new System.Text.Json library.
			  The first method will deserialize a successful response containing a JSON
			  payload to a type we specify. The second and third will serialize an object
			  to JSON to be sent to the server. All three of these methods do this in a 
			  single line. No more having to manually serialized and deserialize objects or
			  check for success codes, making everything much cleaner and removing a lot of
			  boilerplate. One thing to be aware of when using these new methods is that when
			  a non-success code is returned from the server, they’ll throw an exception of type
			  HttpRequestException. This means that it’s generally a good practice to wrap these
			  calls in a try catch statement so non-success codes can be handled gracefully.
	━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/
	// ☰☰☰☰☰☰☰☰☰☰☰  HttpClient-Methods  ☰☰☰☰☰☰☰☰☰☰☰
	protected override async Task OnInitializedAsync() {
	//☰☰☰☰☰☰☰☰☰☰
		try {
			_trails = await Http.GetFromJsonAsync<IEnumerable<TrailModel>>(
				"data/trail-data.json"
				);
	//☰☰☰☰☰☰☰☰☰☰
		} catch(HttpRequestException e) {
			Console.WriteLine(
				$"There was a problem loading trail data: {e.Message}"
				);
		}
	}

}